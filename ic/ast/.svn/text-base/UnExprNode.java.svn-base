package ic.ast;

import ic.error.ScopingError;
import ic.error.TACError;
import ic.error.TypeError;

public class UnExprNode extends ExprNode {
	ExprNode expr; 
	UnOp op;
	
	public UnExprNode(int line,
			ExprNode expr, UnOp op) {
		super(line);
		this.expr = expr;
		this.op = op;
	}
	
	public ExprNode getExpr() {
		return expr;
	}
	
	public UnOp getOp() {
		return op; 
	}
	
	public String opString() {
		if (op == UnOp.UMINUS){
			return "-"; 
		} else {
			return "!";
		}
	}

	
	 
	public String toString() {
		if (op == UnOp.LENGTH) {
			return expr + ".length";
		} else if (op == UnOp.UMINUS){
			return "-" + expr; 
		} else {
			return "!" + expr;
		}
	}
	
	 
	public void accept(Visitor v) {
		v.visit(this);
	}
	
	 
	public <UpType,DownType> UpType accept(PropagatingVisitor<UpType,DownType> v, DownType t) throws Exception {
		return v.visit(this, t);
	}
	
	 
	public <DownType> void accept(PropagateDownVisitor<DownType> v, DownType t) throws Exception {
		v.visit(this, t); 
	}
	
	 
	public <UpType> UpType accept(PropagateUpVisitor<UpType> v) throws Exception {
		return v.visit(this); 
	}
	
	
}
