package ic.ast;

import ic.error.ScopingError;

public class ThisNode extends ExprNode implements Literal {

	ClassIDNode resolvedClass = null; 
	
	public ThisNode(int line) {
		super(line);
	}
	
	public void resolveClass(ClassIDNode resolvedClass) {
		this.resolvedClass = resolvedClass; 
		super.type = resolvedClass; 
	}
	
	public ClassIDNode getResolvedClass() {
		return resolvedClass; 
	}

	 
	public String toString() {
		return "this";
	} 
	
	 
	public void accept(Visitor v) {
		v.visit(this);
	}
	
	 
	public <UpType,DownType> UpType accept(PropagatingVisitor<UpType,DownType> v, DownType t) throws Exception {
		return v.visit(this, t);
	}
	
	 
	public <DownType> void accept(PropagateDownVisitor<DownType> v, DownType t) throws ScopingError {
		v.visit(this, t); 
	}
	
	 
	public <UpType> UpType accept(PropagateUpVisitor<UpType> v) throws Exception {
		return v.visit(this); 
	}

	@Override
	public Object getValue() {
		return resolvedClass.getName();
	}
	
}
