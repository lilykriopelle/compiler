package ic.ast;

import ic.error.ScopingError;
import ic.symtab.SymbolTable;


public class ClassIDNode extends TypeNode {
	String className;
	ClassDecl resolved = null; 

	public ClassIDNode(int line, String className) {
		super(line);
		this.className = className;
	}
	
	public String getName() {
		return className; 
	}
	
	public String toString() {
		return className; 
	}
	
	public void resolve(ClassDecl c) {
		resolved = c;
	}
	
	public ClassDecl getResolved() {
		return resolved; 
	}
	
	public SymbolTable getFieldsAndMethods() {
		return resolved.getScope();
	}
	
	public void setSymbolTable(SymbolTable symbolTable) {
		resolved.setScope(symbolTable);
	}
	
	 
	public boolean isEqualTo(TypeNode t) {
		if(t instanceof ClassIDNode) {
			return ((ClassIDNode)t).getResolved().getScope().getName().equals(className); 
		} else {
			return false; 
		}
	}
	
	public boolean isSubTypeOf(ClassIDNode other) {
		return resolved.getScope().isSubTypeOf(other.getName());
	}
	
	 
	public void accept(Visitor v) {
		v.visit(this);
	}
	
	 
	public <UpType,DownType> UpType accept(PropagatingVisitor<UpType,DownType> v, DownType t) throws Exception {
		return v.visit(this, t);
	}
	
	 
	public <DownType> void accept(PropagateDownVisitor<DownType> v, DownType t) throws Exception {
		v.visit(this, t); 
	}
	
	 
	public <UpType> UpType accept(PropagateUpVisitor<UpType> v) {
		return v.visit(this); 
	}
	
}
